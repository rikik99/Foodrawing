<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.food.domain.user.mapper.UserMapper">
   <!-- 인증 토큰 관련 SQL -->
   <insert id="insertToken"
      parameterType="com.food.domain.user.dto.VerificationTokenDTO">
      INSERT INTO verification_tokens (token, email,
      expiry_date, verified)
      VALUES (#{token}, #{email}, #{expiryDate},
      #{verified})
   </insert>

   <update id="updateEmailVerified" parameterType="map">
      UPDATE
      verification_tokens
      SET verified = #{verified}
      WHERE email = #{email}
   </update>

   <select id="findByToken" parameterType="string"
      resultType="com.food.domain.user.dto.VerificationTokenDTO">
      SELECT id, token, email, expiry_date, verified
      FROM
      verification_tokens
      WHERE token = #{token}
   </select>

   <select id="isEmailVerified" parameterType="string"
      resultType="java.lang.Integer">
      SELECT COALESCE(
      (SELECT CASE
      WHEN verified = 'Y' THEN 1
      ELSE 0
      END
      FROM
      verification_tokens
      WHERE email = #{email}), 0) AS is_verified
      FROM dual
   </select>

   <insert id="insertUser"
      parameterType="com.food.domain.user.dto.UserDTO"
      useGeneratedKeys="true" keyProperty="id" keyColumn="ID">
      INSERT INTO
      USER_TB(USERNAME, PASSWORD, ROLE, CREATED_DATE, DELETED_YN)
      VALUES
      (#{username}, #{password}, 1, CURRENT_TIMESTAMP, 'N')
   </insert>
   <select id="loadUser" parameterType="String"
      resultType="com.food.domain.user.dto.UserDTO">
      SELECT ID, USERNAME, PASSWORD, ROLE, CREATED_DATE,
      DELETED_YN
      FROM USER_TB
   </select>
   <select id="findByUsername" parameterType="String"
      resultType="com.food.domain.user.dto.UserDTO">
      SELECT * FROM USER_TB WHERE USERNAME = #{username}
   </select>
   <delete id="deleteToken" parameterType="String">
      DELETE FROM
      VERIFICATION_TOKENS WHERE EMAIL = #{email}
   </delete>

   <select id="findUsernameByEmail" parameterType="String">
      SELECT U.USERNAME
      FROM USER_TB U JOIN CUSTOMER_TB C ON U.ID = C.USER_ID
      WHERE C.EMAIL =
      #{email}
   </select>

   <update id="updatePasswordByEmail">
      UPDATE USER_TB
      SET PASSWORD = #{password}
      WHERE ID =
      (SELECT USER_ID FROM CUSTOMER_TB WHERE EMAIL = #{email})
   </update>
   <select id="findById" parameterType="Long">
      select * from user_tb where
      id = ${userId}
   </select>

	<select id="getIdByAdminName">
		SELECT ID FROM USER_TB WHERE USERNAME = 'admin'
	</select>
</mapper>